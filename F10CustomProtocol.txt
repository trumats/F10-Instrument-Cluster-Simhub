#ifndef __SHCUSTOMPROTOCOL_H__
#define __SHCUSTOMPROTOCOL_H__

#include <Arduino.h>
#include <SPI.h>
#include <mcp_can.h>

// CAN Setup
#define CAN_CS 9
MCP_CAN CAN(CAN_CS);

#define POLYNOMIAL 0x1D
#define INIT_CRC 0xFF

uint8_t crcTable[256];
uint8_t counter4Bit = 0;
uint8_t count = 0;

void initCRC8Table() {
    for (int i = 0; i < 256; ++i) {
        uint8_t rem = i;
        for (uint8_t b = 0; b < 8; ++b)
            rem = (rem & 0x80) ? (rem << 1) ^ POLYNOMIAL : (rem << 1);
        crcTable[i] = rem;
    }
}

uint8_t getCRC8(const uint8_t* data, uint8_t len, uint8_t finalXor = 0x00) {
    uint8_t crc = INIT_CRC;
    for (uint8_t i = 0; i < len; ++i)
        crc = crcTable[data[i] ^ crc];
    return crc ^ finalXor;
}

class SHCustomProtocol {
private:
    void sendFrame(uint32_t id, uint8_t len, uint8_t *data) {
        CAN.sendMsgBuf(id, 0, len, data);
    }

    void sendIgnitionStatus(bool ignition) {
//        uint8_t ignitionStatus = ignition ? 0x8A : 0x08;
//        uint8_t frame[7] = { 0x80 | counter4Bit, ignitionStatus, 0xDD, 0xF1, 0x01, 0x30, 0x06 };
//        uint8_t message[8] = { getCRC8(frame, 7, 0x44) };
//        memcpy(&message[1], frame, 7);
//        sendFrame(0x12F, 8, message);

          uint8_t ign1[8] = { 0x6E, 0x77, 0xFA, 0xDD, 0xFF, 0xFF, 0xFF, 0x00};
  uint8_t ign2[8] = { 0x88, 0x7A, 0xFA, 0xDD, 0xFF, 0xFF, 0xFF, 0x00};
  uint8_t ign3[8] = { 0xD5, 0x7B, 0xFA, 0xDD, 0xFF, 0xFF, 0xFF, 0x00};
  uint8_t ign4[8] = { 0xD9, 0x50, 0x8A, 0xDD, 0xF4, 0x01, 0x30, 0x01};
  uint8_t ign5[8] = {0x8C, 0x50, 0x8A, 0xDD, 0xF4, 0x05, 0x30, 0x06};

  CAN.sendMsgBuf(0x12F, 0, 8, ign1);
  CAN.sendMsgBuf(0x12F, 0, 8, ign2);
  CAN.sendMsgBuf(0x12F, 0, 8, ign3);
  CAN.sendMsgBuf(0x12F, 0, 8, ign4);
  CAN.sendMsgBuf(0x12F, 0, 8, ign5);
    }

    void sendBackLightsStatus(bool status) {
        uint8_t backLightStatus = status ? 0xFD : 0x00;
        uint8_t backLight[2] = { backLightStatus, 0xFF };
        sendFrame(0x202, 2, backLight);
    }

    void sendDriveMode(uint8_t driveMode) {
        uint8_t drive[8] = {0x00, 0x00, 0x00, 0x00, driveMode, 0x00, 0x00, 0x00};
        sendFrame(0x3A7, 8, drive);
    }

    void sendOilTemp(uint8_t oilTempValue) {
        uint8_t oilTemp[8] = {0x02, 0x00, 0x00, 0x00, 0x00, oilTempValue, 0x00, 0x00};
        sendFrame(0x3F9, 8, oilTemp);
    }

    void sendSpeed(float kph) {
        uint16_t scaled = (uint16_t)(kph * 64.01);
        uint8_t frame[4] = { static_cast<uint8_t>(0xC0 | counter4Bit), lowByte(scaled), highByte(scaled), kph == 0 ? 0x81 : 0x91 };
        uint8_t message[5] = { getCRC8(frame, 4, 0xA9) };
        memcpy(&message[1], frame, 4);
        sendFrame(0x1A1, 5, message);
    }

    void sendRPM(int rpm, int gear) {
        int mappedGear = 0;
        if (gear >= 1 && gear <= 9) mappedGear = gear + 4;
        else if (gear == 11) mappedGear = 2;
        else if (gear == 12) mappedGear = 1;

        int rpmVal = map(rpm, 0, 6900, 0x00, 0x2B);
        uint8_t frame[7] = { static_cast<uint8_t>(0x60 | counter4Bit), static_cast<uint8_t>(rpmVal), 0xC0, 0xF0, static_cast<uint8_t>(mappedGear), 0xFF, 0xFF };
        uint8_t message[8] = { getCRC8(frame, 7, 0x7A) };
        memcpy(&message[1], frame, 7);
        sendFrame(0x0F3, 8, message);
    }

    void sendFuel(int fuelQuantity) {
        uint8_t inFuelRange[3] = {0, 50, 100};
        uint8_t outFuelRange[3] = {37, 18, 4};
        uint8_t fuelQuantityLiters = map(fuelQuantity, inFuelRange[0], inFuelRange[2], outFuelRange[0], outFuelRange[2]);
        unsigned char fuelWithoutCRC[] = { highByte(fuelQuantityLiters), lowByte(fuelQuantityLiters), highByte(fuelQuantityLiters), lowByte(fuelQuantityLiters), 0x00 };
        sendFrame(0x349, 5, fuelWithoutCRC);
    }

    void sendAirbagOff() {
        uint8_t message[2] = {count, 0xFF};
        sendFrame(0x0D7, 2, message);
    }

    void sendSeatbelt(bool status) {
        if (status) {
            uint8_t belt[8] = {0x40, 0x4D, 0x00, 0x00, 0x28, 0xFF, 0xFF, 0xFF}; // ON
            sendFrame(0x581, 8, belt);
        } else {
            uint8_t belt2[8] = {0x40, 0x4D, 0x00, 0x00, 0x29, 0xFF, 0xFF, 0xFF}; // OFF
            sendFrame(0x394, 8, belt2);
        }
    }

    void kombiHappy() {
        uint8_t stmp1[8] = {0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00};
        uint8_t stmp3[8] = {0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        uint8_t stmp4[8] = {0x12, 0xDD, 0x8A, 0xDD, 0xF1, 0x15, 0x30, 0x02};
        uint8_t stmp5[8] = {0x02, 0xDD, 0xDD, 0x00, 0x00, 0xDD, 0xDD, 0xDD};
        uint8_t stmp6[8] = {0x80, 0x00, 0x8A, 0xDD, 0xF1, 0x01, 0x30, 0x06};
        sendFrame(0x7C3, 8, stmp1);
        sendFrame(0x3D8, 8, stmp3);
        sendFrame(0x3F9, 8, stmp4);
        sendFrame(0x12F, 8, stmp5);
        sendFrame(0x12F, 8, stmp6);
    }

public:
    void setup() {
        if (CAN.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ) == CAN_OK) {
            CAN.setMode(MCP_NORMAL);
            initCRC8Table();
            FlowSerialDebugPrintLn("CAN OK");
        } else {
            FlowSerialDebugPrintLn("CAN FAIL");
        }
    }

  void read() {
    String speedStr = FlowSerialReadStringUntil(';');
    String rpmStr   = FlowSerialReadStringUntil(';');
    String gearStr  = FlowSerialReadStringUntil(';');
    String fuelStr  = FlowSerialReadStringUntil(';');
    String oilStr   = FlowSerialReadStringUntil('\n');

    float speed = speedStr.toFloat();
    int rpm     = rpmStr.toInt();
    int gear    = gearStr.toInt();
    int fuel    = fuelStr.toInt();
    int oilTemp = oilStr.toInt(); // <- new!

    sendSpeed(speed);
    sendRPM(rpm, gear);
    sendFuel(fuel);
    sendOilTemp(oilTemp); // <- new!
    sendBackLightsStatus(true);
    sendDriveMode(5);
    kombiHappy();

    sendAirbagOff();
    sendSeatbelt(true);
    count++;
    counter4Bit = (counter4Bit + 1) % 15;
}

    void loop() {
            sendIgnitionStatus(true);
    }

    void idle() {
        // Optional idle logic
    }
};

#endif